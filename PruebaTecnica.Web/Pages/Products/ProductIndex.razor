@page "/Productos"
@using PruebaTecnica.Shared.Entities
@using PruebaTecnica.Web.Repositories
@using PruebaTecnica.Web.Shared
@using Microsoft.AspNetCore.Authorization
@inject SweetAlertService swal
@inject IRepository repository
@inject NavigationManager navigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider


@attribute [Authorize(Roles = "Admin, User")]

<h3>Productos</h3>

<div class="d-flex gap-2 mt-2 mb-4">
    <!-- Agrega margen inferior -->
    <input type="text" @bind="SearchTerm" placeholder="Buscar..." class="form-control" />
    <button class="btn btn-primary" @onclick="ApplySearchFilter">Buscar</button>
</div>

<div class="container mt-2">
    <div class="d-flex justify-content-between align-items-center mb-2">
        <a class="btn btn-primary btn-sm shadow-sm px-2 py-1" href="/Productos/Create">
            Crear Producto
        </a>
    </div>
</div>

<GenericList MyList="Products">
    <Body>
        <table class="table table-striped table-bordered custom-table">
            <thead>
                <tr>
                    <th>Codigo</th>
                    <th>Nombre</th>
                    <th>Foto</th>
                    <th>Valor</th>
                    <th>Proveedor</th>
                    <th>Email Proveedor</th>
                    <th>Celular Proveedor</th>    
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var Produt in Products)
                {
                    <tr>
                        <td>@Produt.Code</td>
                        <td>@Produt.NameProduct</td>
                        <td>
                            <div style="height:150px; width:150px;">
                                <img style="width:100%; height:100%" src="@Produt.Photo" />
                            </div>
                        </td>
                        <td>@Produt.Price</td>
                        <td>@Produt.Supplier.NameSupplier</td>
                        <td>@Produt.Supplier.Email</td>
                        <td>@Produt.Supplier.CellPhone</td>

                        <td>
                            <a href="/Product/edit/@Produt.Id" class="btn btn-warning">Editar</a>
                            <button class="btn btn-danger" @onclick="@(() => DeleteAsync(Produt))">Borrar</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </Body>
</GenericList>

@code {

    public List<Product> Products { get; set; }

    private bool IsAdmin { get; set; }
    private string SearchTerm { get; set; } = "";


    protected async override Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        IsAdmin = user.IsInRole("Admin");
        await Load();
    }

    private async Task Load()
    {
        var queryParams = new List<string>();

        if (!string.IsNullOrWhiteSpace(SearchTerm))
        {
            queryParams.Add($"search={SearchTerm}");
        }

        // Genera la cadena de consulta correctamente
        var queryString = queryParams.Any() ? $"?{string.Join("&", queryParams)}" : "";

        // Ahora usa queryString en lugar de queryParams
        var responseHttp = await repository.GetAsync<List<Product>>($"/api/products{queryString}");
        Products = responseHttp.Response!;
    }

    private async Task ApplySearchFilter()
    {
        await Load();
    }

    private async Task DeleteAsync(Product Product)
    {
        var result = await swal.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Esta seguro que quieres borrar el registro?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true
            });

        var confirm = string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        var responseHTTP = await repository.DeleteAsync<Product>($"api/products/{Product.Id}");

        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/");
            }
            else
            {
                var mensajeError = await responseHTTP.GetErrorMessageAsync();
                await swal.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
            }
        }
        else
        {
            await Load();
        }
    }
}