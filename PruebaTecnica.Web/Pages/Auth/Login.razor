@page "/Login"

@using PruebaTecnica.Shared.DTOs;
@using PruebaTecnica.Web.Pages.Auth
@using PruebaTecnica.Web.Services;

@inject IRepository repository
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager
@inject ILoginService loginService


<div class="row">
    <div class="col-md-4  offset-md-4">


        <EditForm Model="loginDTO" OnValidSubmit="LoginAsync">

            <DataAnnotationsValidator />

            <div class="card bg-light">
                <div class="card-header justify-content-center">
                    <span>
                        <i class="oi oi-account-login" /> Iniciar Sesión

                    </span>
                </div>
                <div class="card-body">

                    <div class="mb-3">

                        <label>Email:</label>

                        <div>

                            <InputText class="form-control" @bind-Value="@loginDTO.Email" />

                            <ValidationMessage For="@(() => loginDTO.Email)" />

                        </div>

                    </div>

                    <div class="card-body">

                        <label>Contraseña:</label>

                        <div>

                            <InputText type="password" class="form-control" @bind-Value="@loginDTO.Password" />

                            <ValidationMessage For="@(() => loginDTO.Password)" />

                        </div>

                        <div class="card-footer">
                            <a class="bbtn btn-link" href="/ResendToken">Reenviar correro de activación de cuenta</a>
                            <p><a class="bbtn btn-link" href="/RecoverPassword">¿Has olvidado tu contraseña?</a></p>
                        </div>


                    </div>

                    <button class="btn btn-primary" type="submit">Iniciar Sesión</button>

                </div>

            </div>

        </EditForm>
    </div>
</div>



@code {

    private LoginDTO loginDTO = new();



    private async Task LoginAsync()

    {

        var responseHttp = await repository.PostAsync<LoginDTO, TokenDTO>("/api/accounts/Login", loginDTO);

        if (responseHttp.Error)

        {

            var message = await responseHttp.GetErrorMessageAsync();

            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);

            return;

        }

        await loginService.LoginAsync(responseHttp.Response!.Token);

        navigationManager.NavigateTo("/");

    }

} 