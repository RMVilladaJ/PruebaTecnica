@page "/Sales"
@using PruebaTecnica.Shared.Entities
@using PruebaTecnica.Web.Repositories
@using PruebaTecnica.Web.Shared
@using Microsoft.AspNetCore.Authorization
@inject SweetAlertService swal
@inject IRepository repository
@inject NavigationManager navigationManager
inject IAuthorizationService AuthorizationService
@inject AuthenticationStateProvider AuthenticationStateProvider


@attribute [Authorize(Roles = "Admin, Seller")]

<h3>Ventas</h3>
<div class="mb-3">
    <a class="btn btn-create" href="/Sales/Create">Registrar venta</a>

    @* control para seleccionar un rango de fecha *@
    <div class="d-flex gap-2 mt-2">
        <label for="startDate">Desde:</label>
        <input type="date" id="startDate" @bind="StartDate" class="form-control" />
        <label for="endDate">Hasta:</label>
        <input type="date" id="endDate" @bind="EndDate" class="form-control" />
        <button class="btn btn-primary" @onclick="ApplyDateFilter">Filtrar</button>
    </div>

</div>

<GenericList MyList="Sales">
    <Body>
        <table class="table table-striped table-bordered custom-table">
            <thead>
                <tr>
                    <th>Producto</th>
                    <th>Cantidad</th>
                    <th>Valor del impuesto</th>
                    <th>Fecha venta</th>
                    <th>Precio final</th> 
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var Sale in Sales)
                {
                    <tr>
                        <td>@Sale.Quantity</td>
                        <td>@Sale.SaleDate</td>
                        <td>@Sale.FinalPrice</td>

                        <td>
                            <a href="/Sale/edit/@Sale.Id" class="btn btn-warning">Editar</a>
                            <button class="btn btn-danger" @onclick="@(() => DeleteAsync(Sale))">Borrar</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </Body>
</GenericList>

@code {

    public List<Sale> Sales { get; set; }

    private DateTime? StartDate { get; set; }
    private DateTime? EndDate { get; set; }

    private bool IsAdmin { get; set; }

    protected async override Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        IsAdmin = user.IsInRole("Admin");
        await Load();
    }

    private async Task Load()
    {
        var queryParams = "";
        if (StartDate.HasValue && EndDate.HasValue)
        {
            queryParams = $"?startDate={StartDate.Value:yyyy-MM-dd}&endDate={EndDate.Value:yyyy-MM-dd}";
        }
        var responseHttp = await repository.GetAsync<List<Sale>>($"/api/Sales{queryParams}");
        Sales = responseHttp.Response!;
    }

    private async Task ApplyDateFilter()
    {
        await Load();
    }

    private async Task DeleteAsync(Sale Sale)
    {
        var result = await swal.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Esta seguro que quieres borrar el registro?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true
            });

        var confirm = string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        var responseHTTP = await repository.DeleteAsync<Sale>($"api/Sales/{Sale.Id}");

        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/");
            }
            else
            {
                var mensajeError = await responseHTTP.GetErrorMessageAsync();
                await swal.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
            }
        }
        else
        {
            await Load();
        }
    }
}